--- a/src/types/gantt.ts
+++ b/src/types/gantt.ts
@@ -1,6 +1,19 @@
 export type TimelineUnit = 'day' | 'week' | 'month';
 
 export interface Task {
+  /**
+   * Иерархия: если parentId задан, это подзадача. Уровень вложенности только один.
+   */
+  parentId?: string | null;
+  /**
+   * Порядок внутри своей группы (родитель или конкретный parentId)
+   */
+  orderIndex?: number;
+  /**
+   * Для родительских задач: свернуто ли дерево в левом списке.
+   * (временно храним локально через storage; затем переключим на сервер)
+   */
+  isCollapsed?: boolean;
   id: string;
   name: string;
   startDate: Date;

--- a/src/components/TaskBar.tsx
+++ b/src/components/TaskBar.tsx
@@ -4,6 +4,8 @@
 
 interface Props {
   task: Task;
+  /** Родительская строка: рисуем тонкую линию (20% высоты) */
+  isParentRow?: boolean;
   projectStartDate: Date;
   dayWidth: number;
   rowHeight: number;
@@ -39,12 +41,7 @@
   }
 }
 
-export const TaskBar: React.FC<Props> = ({
-  task,
-  projectStartDate,
-  dayWidth,
-  rowHeight,
-  onTaskUpdate,
+export const TaskBar: React.FC<Props> = ({ task, projectStartDate, dayWidth, rowHeight, onTaskUpdate, isParentRow,
   showTargetHandles,
   onStartConnect,
   onPickTarget,
@@ -77,7 +74,7 @@
   const width = useMemo(() => (differenceInDays(task.endDate, task.startDate) + 1) * dayWidth, [task.endDate, task.startDate, dayWidth]);
 
   // Константы UI
-  const BAR_H = Math.max(20, rowHeight - 10); // бар по центру строки
+  const BAR_H = (isParentRow ? Math.max(4, Math.floor(rowHeight * 0.2)) : Math.max(20, rowHeight - 10)); // бар по центру строки
   const BAR_TOP = (rowHeight - BAR_H) / 2;
 
   const PLUS_SIZE = 24;    // 1.5x

--- a/src/components/GanttChart.tsx
+++ b/src/components/GanttChart.tsx
@@ -17,6 +17,34 @@
 const ROW_HEIGHT = 32;
 const DAY_WIDTHS: Record<TimelineUnit, number> = { day: 24, week: 12, month: 4 };
 const HEADER_HEIGHT = 49;
+// Построение плоского списка видимых задач с учётом свёртки (родители → дети)
+const visibleTasks: Task[] = useMemo(() => {
+  const all = project.tasks || [];
+  const byParent: Record<string, Task[]> = {};
+  const roots: Task[] = [];
+  // сохраняем порядок как в project.tasks
+  for (const t of all) {
+    if (t.parentId) {
+      (byParent[t.parentId] = byParent[t.parentId] || []).push(t);
+    } else {
+      roots.push(t);
+    }
+  }
+  const out: Task[] = [];
+  for (const r of roots) {
+    out.push(r);
+    if (!r.isCollapsed) {
+      const kids = byParent[r.id] || [];
+      for (const k of kids) out.push(k);
+    }
+  }
+  // на случай «сирот» (дети без родителя) — добавим в конец
+  for (const t of all) {
+    if (t.parentId && !out.includes(t)) out.push(t);
+  }
+  return out;
+}, [project.tasks]);
+
 
 export const GanttChart: React.FC<Props> = ({
   project,
@@ -102,6 +130,33 @@
     onUpdateProject({ ...project, tasks });
   };
 
+  // Создать задачу/подзадачу (быстрое добавление)
+  const createTaskQuick = (name: string, parentId: string | null) => {
+    const today = new Date();
+    const end = addDays(today, 5);
+    const t: Task = {
+      id: String(Date.now()),
+      name,
+      startDate: today,
+      endDate: end,
+      progress: 0,
+      priority: 3,
+      assignee: '',
+      color: '#3b82f6',
+      parentId: parentId || null,
+    };
+    onUpdateProject({ ...project, tasks: [...project.tasks, t] });
+  };
+
+  const onCreateTask = (name: string) => createTaskQuick(name, null);
+  const onCreateSubtask = (parentId: string, name: string) => createTaskQuick(name, parentId);
+
+  const onToggleCollapse = (taskId: string, collapsed: boolean) => {
+    const tasks = project.tasks.map(t => (t.id === taskId ? { ...t, isCollapsed: collapsed } : t));
+    onUpdateProject({ ...project, tasks });
+  };
+
+
   // Добавление зависимости: запрет циклов и дублей; цель не может начинаться раньше конца источника.
   // При необходимости сдвигаем цель вправо, сохраняя её длительность.
   const addDependency = (fromId: string, toId: string) => {
@@ -139,9 +194,9 @@
   // Индексы строк
   const idToIndex: Record<string, number> = useMemo(() => {
     const map: Record<string, number> = {};
-    project.tasks.forEach((t, i) => { map[t.id] = i; });
+    visibleTasks.forEach((t, i) => { map[t.id] = i; });
     return map;
-  }, [project.tasks]);
+  }, [visibleTasks]);
 
   // --- НОВОЕ: скрываем "+" на барах, уже связанных с источником (в любом направлении) ---
   const blockedTargets = useMemo(() => {
@@ -220,7 +275,8 @@
       <div className="border-r overflow-auto" style={{ width: listWidth }}>
         <div style={{ height: HEADER_HEIGHT }} />
         <TaskList
-          tasks={project.tasks}
+          tasks={visibleTasks}
+          allTasks={project.tasks}
           milestones={project.milestones}
           onEditTask={onEditTask ?? (() => {})}
           onEditMilestone={onEditMilestone ?? (() => {})}
@@ -231,6 +287,9 @@
             onUpdateProject({ ...project, milestones: project.milestones.filter(m => m.id !== id) })
           }
           onReorderTasks={newTasks => onUpdateProject({ ...project, tasks: newTasks })}
+          onCreateTask={onCreateTask}
+          onCreateSubtask={onCreateSubtask}
+          onToggleCollapse={onToggleCollapse}
           rowHeight={ROW_HEIGHT}
           onFocusTask={focusTask}
         />
@@ -247,9 +306,9 @@
         <div style={{ minWidth: contentWidth }}>
           <Timeline startDate={start} endDate={end} dayWidth={dayWidth} unit={unit} />
 
-          <div className="relative" style={{ height: project.tasks.length * ROW_HEIGHT }} ref={barsRef}>
+          <div className="relative" style={{ height: visibleTasks.length * ROW_HEIGHT }} ref={barsRef}>
             <div className="absolute inset-0">
-              {project.tasks.map((t, i) => (
+              {visibleTasks.map((t, i) => (
                 <div
                   key={t.id}
                   className="absolute left-0 right-0"
@@ -263,6 +322,7 @@
                     onTaskUpdate={onTaskUpdate}
                     showTargetHandles={!!connectingFrom && connectingFrom !== t.id && !blockedTargets.has(t.id)}
                     onStartConnect={(((id: string) => setConnectingFrom(id)) as any)}
+                    isParentRow={project.tasks.some(tt => tt.parentId === t.id)}
                     onPickTarget={(((id: string) => { if (connectingFrom) addDependency(connectingFrom, id); setConnectingFrom(null); }) as any)}
                     scrollContainer={scrollRef.current as HTMLDivElement | null}
                   />

--- a/src/components/TaskList.tsx
+++ b/src/components/TaskList.tsx
@@ -1,167 +1,290 @@
-import React, { useState } from 'react';
+
+import React, { useMemo, useState } from 'react';
 import { Task, Milestone } from '../types/gantt';
-import { Pencil, Trash2, GripVertical, Diamond } from 'lucide-react';
+import { Pencil, Trash2, GripVertical, Diamond, MoreHorizontal, ChevronRight, ChevronDown, Plus } from 'lucide-react';
+import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from './ui/dropdown-menu';
+import { Input } from './ui/input';
+import { Button } from './ui/button';
 
 interface TaskListProps {
+  /** Видимые задачи в порядке строк (уже с учётом свёртки) */
   tasks: Task[];
+  /** Полный список задач проекта (для подсчёта детей) */
+  allTasks: Task[];
   milestones: Milestone[];
   onEditTask: (task: Task) => void;
   onDeleteTask: (taskId: string) => void;
   onEditMilestone: (milestone: Milestone) => void;
   onDeleteMilestone: (milestoneId: string) => void;
-  onReorderTasks: (newTasks: Task[]) => void;
+  onReorderTasks: (newTasks: Task[]) => void; // временно не используем для вложенности (оставим для совместимости)
+  onCreateTask: (name: string) => void;
+  onCreateSubtask: (parentId: string, name: string) => void;
+  onToggleCollapse: (taskId: string, collapsed: boolean) => void;
   rowHeight: number;
   onFocusTask?: (taskId: string) => void;
 }
 
-/**
- * Разделяет зоны:
- * - перетаскивание задач — ТОЛЬКО за левую "ручку" (GripVertical);
- * - клик по остальной части строки — фокусирует задачу на таймлайне;
- * - зона дропа — вся строка;
- * - никаких визуальных границ.
- */
 export const TaskList: React.FC<TaskListProps> = ({
   tasks,
+  allTasks,
   milestones,
   onEditTask,
   onDeleteTask,
   onEditMilestone,
   onDeleteMilestone,
   onReorderTasks,
+  onCreateTask,
+  onCreateSubtask,
+  onToggleCollapse,
   rowHeight,
-  onFocusTask,
+  onFocusTask
 }) => {
-  const [dragIndex, setDragIndex] = useState<number | null>(null);
-  const [overIndex, setOverIndex] = useState<number | null>(null);
-
-  // Запуск DnD — только с "ручки"
-  const startDragHandle = (idx: number) => (e: React.DragEvent<HTMLDivElement>) => {
-    e.stopPropagation();
-    try { e.dataTransfer.setData('text/plain', String(idx)); } catch {}
-    e.dataTransfer.effectAllowed = 'move';
-    setDragIndex(idx);
+  // локальное состояние для инпутов быстрого создания
+  const [addingParentId, setAddingParentId] = useState<string | null>(null);
+  const [addingRoot, setAddingRoot] = useState<boolean>(false);
+  const [newName, setNewName] = useState<string>('');
+
+  const childCount = useMemo(() => {
+    const map: Record<string, number> = {};
+    for (const t of allTasks) {
+      if (t.parentId) {
+        map[t.parentId] = (map[t.parentId] || 0) + 1;
+      }
+    }
+    return map;
+  }, [allTasks]);
+
+  const idxOfLastChild: Record<string, number> = useMemo(() => {
+    // индекс последнего видимого ребёнка в массиве tasks
+    const res: Record<string, number> = {};
+    tasks.forEach((t, i) => {
+      if (t.parentId) res[t.parentId] = i;
+    });
+    return res;
+  }, [tasks]);
+
+  const submitNew = (parentId: string | null) => {
+    const name = newName.trim();
+    if (!name) return;
+    if (parentId) onCreateSubtask(parentId, name);
+    else onCreateTask(name);
+    setNewName('');
+    setAddingParentId(null);
+    setAddingRoot(false);
   };
 
-  // Подсветка строки как зоны дропа
-  const overRow = (idx: number) => (e: React.DragEvent<HTMLDivElement>) => {
-    e.preventDefault();
-    e.dataTransfer.dropEffect = 'move';
-    setOverIndex(idx);
+  const cancelNew = () => {
+    setNewName('');
+    setAddingParentId(null);
+    setAddingRoot(false);
   };
-  const leaveRow = () => setOverIndex(null);
-
-  const dropRow = (idx: number) => (e: React.DragEvent<HTMLDivElement>) => {
-    e.preventDefault();
-    const raw = (dragIndex !== null) ? String(dragIndex) : (e.dataTransfer.getData('text/plain') || '');
-    const from = parseInt(raw, 10);
-    if (Number.isNaN(from) || from === idx) { setDragIndex(null); setOverIndex(null); return; }
-    const arr = [...tasks];
-    const [moved] = arr.splice(from, 1);
-    arr.splice(idx, 0, moved);
-    onReorderTasks(arr);
-    setDragIndex(null);
-    setOverIndex(null);
-  };
-  const endDrag = () => { setDragIndex(null); setOverIndex(null); };
-
-  const Row: React.FC<{t: Task; i: number}> = ({ t, i }) => (
-    <div
-      className={"border-b " + (overIndex === i ? "bg-accent/40" : "")}
-      onDragOver={overRow(i)}
-      onDragEnter={overRow(i)}
-      onDragLeave={leaveRow}
-      onDrop={dropRow(i)}
-      style={{ height: rowHeight }}
-      role="listitem"
-    >
-      <div className="flex items-stretch gap-2 px-2 h-full select-none">
-        {/* Ручка перетаскивания — единственная draggable-область */}
-        <div
-          className="w-7 shrink-0 flex items-center justify-center cursor-grab active:cursor-grabbing rounded hover:bg-accent"
-          title="Перетащить задачу"
-          draggable
-          onDragStart={startDragHandle(i)}
-          onDragEnd={endDrag}
-          onClick={(e) => e.stopPropagation()}
-        >
-          <GripVertical className="w-4 h-4 text-muted-foreground" />
-        </div>
-
-        {/* Кликабельная область задачи */}
-        <button
-          className="flex-1 grid grid-cols-[1fr_auto_auto] items-center gap-2 pr-2 text-left hover:bg-accent/30 rounded transition-colors"
-          onClick={() => onFocusTask && onFocusTask(t.id)}
-          type="button"
-          title="Кликните, чтобы перейти к задаче на таймлайне"
-        >
-          <div className="min-w-0 py-1">
-            <div className="text-sm font-medium leading-none truncate">{t.name}</div>
-            <div className="text-xs text-muted-foreground truncate">
-              {t.assignee ? t.assignee + " • " : ""}
-              {formatShortDate(t.startDate)} — {formatShortDate(t.endDate)}
+
+  const Row: React.FC<{ t: Task; i: number }> = ({ t, i }) => {
+    const isChild = !!t.parentId;
+    const hasChildren = (childCount[t.id] || 0) > 0;
+    const collapsed = !!t.isCollapsed;
+
+    const paddingLeft = isChild ? 28 : 12;
+
+    return (
+      <div className="border-b" style={{ height: rowHeight }}>
+        <div className="grid grid-cols-[20px_1fr_auto_auto_auto] items-center gap-2 px-2 h-full"
+             onClick={() => onFocusTask?.(t.id)}
+             title="Кликните, чтобы перейти к задаче на таймлайне">
+          {/* Ручка перетаскивания (пока неактивна для вложенности) */}
+          <div className="text-muted-foreground">
+            <GripVertical className="w-4 h-4 opacity-40" />
+          </div>
+
+          {/* Текст + бейдж + стрелка */}
+          <div className="min-w-0 flex items-center gap-2" style={{ paddingLeft }}>
+            {/* Стрелка свёртки только у родителей */}
+            {!isChild && (childCount[t.id] || 0) > 0 ? (
+              <button
+                className="p-1 rounded hover:bg-accent shrink-0"
+                onClick={(e) => { e.stopPropagation(); onToggleCollapse(t.id, !collapsed); }}
+                title={collapsed ? 'Развернуть' : 'Свернуть'}
+              >
+                {collapsed ? <ChevronRight className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
+              </button>
+            ) : <div className="w-6" />}
+
+            <div className="min-w-0">
+              <div className="text-sm font-medium leading-none truncate">{t.name}</div>
+              <div className="text-xs text-muted-foreground truncate">
+                {t.assignee ? t.assignee + ' • ' : ''}{formatShortDate(t.startDate)} — {formatShortDate(t.endDate)}
+              </div>
             </div>
+
+            {/* Бейдж количества детей */}
+            {!isChild && (childCount[t.id] || 0) > 0 && (
+              <span className="ml-2 text-[10px] px-1.5 py-0.5 rounded-full bg-muted text-muted-foreground shrink-0">
+                {(childCount[t.id])} подзадач
+              </span>
+            )}
           </div>
 
-          <span
+          {/* Карандаш */}
+          <button
             className="p-1 rounded hover:bg-accent justify-self-end"
             onClick={(e) => { e.stopPropagation(); onEditTask(t); }}
             title="Редактировать"
           >
             <Pencil className="w-4 h-4" />
-          </span>
-
-          <span
+          </button>
+
+          {/* Меню действий */}
+          <DropdownMenu>
+            <DropdownMenuTrigger asChild>
+              <button
+                className="p-1 rounded hover:bg-accent justify-self-end"
+                onClick={(e) => e.stopPropagation()}
+                title="Действия"
+              >
+                <MoreHorizontal className="w-4 h-4" />
+              </button>
+            </DropdownMenuTrigger>
+            <DropdownMenuContent align="end">
+              {!isChild && (
+                <DropdownMenuItem className="cursor-pointer" onClick={() => { setAddingParentId(t.id); setAddingRoot(false); setNewName(''); }}>
+                  <Plus className="w-4 h-4 mr-2" /> Создать подзадачу
+                </DropdownMenuItem>
+              )}
+              <DropdownMenuItem className="cursor-pointer text-destructive" onClick={() => onDeleteTask(t.id)}>
+                <Trash2 className="w-4 h-4 mr-2" /> Удалить
+              </DropdownMenuItem>
+            </DropdownMenuContent>
+          </DropdownMenu>
+
+          {/* Корзина (для наглядности оставим иконку как раньше) */}
+          <button
             className="p-1 rounded hover:bg-accent text-destructive justify-self-end"
             onClick={(e) => { e.stopPropagation(); onDeleteTask(t.id); }}
             title="Удалить"
           >
             <Trash2 className="w-4 h-4" />
-          </span>
-        </button>
+          </button>
+        </div>
       </div>
-    </div>
-  );
-
-  const MilestoneRow: React.FC<{m: Milestone}> = ({ m }) => (
-    <div className="border-b" style={{ height: rowHeight }}>
-      <div className="flex items-center gap-2 px-3 h-full">
-        <Diamond className="w-4 h-4 text-purple-500 shrink-0" />
-        <div className="flex-1">
-          <div className="text-sm font-medium leading-none">{m.name}</div>
-          <div className="text-xs text-muted-foreground">{formatShortDate(m.date)}</div>
+    );
+  };
+
+  // Рендер
+  return (
+    <div>
+      {/* Задачи */}
+      {tasks.map((t, i) => {
+        const row = <Row key={t.id} t={t} i={i} />;
+        const rows: React.ReactNode[] = [row];
+
+        // Кнопка "Добавить подзадачу" под последним ребёнком
+        if (t.parentId) {
+          const parentId = t.parentId;
+          const isLastChild = idxOfLastChild[parentId] === i;
+          if (isLastChild && addingParentId !== parentId) {
+            rows.push(
+              <div key={t.id + ':add-child'} className="border-b" style={{ height: rowHeight }}>
+                <div className="flex items-center px-10 h-full">
+                  <button
+                    className="text-xs text-primary hover:underline"
+                    onClick={(e) => { e.stopPropagation(); setAddingParentId(parentId); setAddingRoot(false); setNewName(''); }}
+                  >
+                    + Добавить подзадачу
+                  </button>
+                </div>
+              </div>
+            );
+          }
+        } else {
+          // Если у родителя нет детей, но запрашивают добавление — покажем инпут сразу под родителем
+          if ((childCount[t.id] || 0) === 0 && addingParentId === t.id) {
+            // вставим инпут прямо здесь — как "первая подзадача"
+          }
+        }
+
+        // Инпут быстрого добавления (под родителем или под последним ребенком)
+        const insertIndex = addingParentId ? (idxOfLastChild[addingParentId] ?? tasks.findIndex(x => x.id === addingParentId)) : -1;
+        if (addingParentId && i === insertIndex) {
+          rows.push(
+            <div key={t.id + ':input'} className="border-b" style={{ height: rowHeight }}>
+              <form
+                className="flex items-center gap-2 px-10 h-full"
+                onSubmit={(e) => { e.preventDefault(); submitNew(addingParentId); }}
+                onClick={(e) => e.stopPropagation()}
+              >
+                <Input
+                  autoFocus
+                  placeholder="Название подзадачи"
+                  value={newName}
+                  onChange={(e) => setNewName(e.target.value)}
+                  className="h-8"
+                />
+                <Button type="submit" className="h-8 px-3">Сохранить</Button>
+                <Button type="button" variant="ghost" className="h-8 px-3" onClick={cancelNew}>Отмена (Esc)</Button>
+              </form>
+            </div>
+          );
+        }
+
+        return rows;
+      })}
+
+      {/* Добавить задачу внизу списка */}
+      {!addingRoot ? (
+        <div className="border-b" style={{ height: rowHeight }}>
+          <div className="flex items-center px-3 h-full">
+            <button
+              className="text-sm text-primary hover:underline"
+              onClick={() => { setAddingRoot(true); setAddingParentId(null); setNewName(''); }}
+            >
+              + Добавить задачу
+            </button>
+          </div>
         </div>
-        <button
-          className="p-1 rounded hover:bg-accent"
-          onClick={(e) => { e.stopPropagation(); onEditMilestone(m); }}
-          title="Редактировать"
-          type="button"
-        >
-          <Pencil className="w-4 h-4" />
-        </button>
-        <button
-          className="p-1 rounded hover:bg-accent text-destructive"
-          onClick={(e) => { e.stopPropagation(); onDeleteMilestone(m.id); }}
-          title="Удалить"
-          type="button"
-        >
-          <Trash2 className="w-4 h-4" />
-        </button>
-      </div>
-    </div>
-  );
-
-  return (
-    <div className="text-sm select-none">
-      {tasks.map((t, i) => (
-        <Row key={t.id} t={t} i={i} />
-      ))}
-
-      {milestones.length > 0 && (
-        <div className="mt-2 mb-1 px-3 text-xs text-muted-foreground">Майлстоуны</div>
+      ) : (
+        <div className="border-b" style={{ height: rowHeight }}>
+          <form
+            className="flex items-center gap-2 px-3 h-full"
+            onSubmit={(e) => { e.preventDefault(); submitNew(null); }}
+          >
+            <Input
+              autoFocus
+              placeholder="Название задачи"
+              value={newName}
+              onChange={(e) => setNewName(e.target.value)}
+              className="h-8"
+            />
+            <Button type="submit" className="h-8 px-3">Сохранить</Button>
+            <Button type="button" variant="ghost" className="h-8 px-3" onClick={cancelNew}>Отмена</Button>
+          </form>
+        </div>
       )}
-      {milestones.map((m) => (
-        <MilestoneRow key={m.id} m={m} />
+
+      {/* Milestones (как раньше) */}
+      {milestones.map(m => (
+        <div key={m.id} className="border-b" style={{ height: rowHeight }}>
+          <div className="flex items-center gap-2 px-3 h-full">
+            <Diamond className="w-4 h-4 text-purple-500 shrink-0" />
+            <div className="flex-1">
+              <div className="text-sm font-medium leading-none">{m.name}</div>
+              <div className="text-xs text-muted-foreground">{formatShortDate(m.date)}</div>
+            </div>
+            <button
+              className="p-1 rounded hover:bg-accent"
+              onClick={(e) => { e.stopPropagation(); onEditMilestone(m); }}
+              title="Редактировать"
+            >
+              <Pencil className="w-4 h-4" />
+            </button>
+            <button
+              className="p-1 rounded hover:bg-accent text-destructive"
+              onClick={(e) => { e.stopPropagation(); onDeleteMilestone(m.id); }}
+              title="Удалить"
+            >
+              <Trash2 className="w-4 h-4" />
+            </button>
+          </div>
+        </div>
       ))}
     </div>
   );
